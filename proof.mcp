use axiom axioms

claim add_comm: a + b = b + a
claim add_assoc: a + (b + c) = (a + b) + c
claim mul_distrib: a X (b + c) = a X b + a X c

claim add_assoc: a + (b + c) = (a + b) + c {
    prop P(_a): add_assoc.statement
    claim P_base: P(0) {}
    claim P_inc: P(a) => P(inc(a)) {apply add_inc}
    claim P_dec: P(a) => P(dec(a)) {apply add_dec}
    use induct(P, P_base, P_inc, P_dec)
}

claim add_comm: a + b = b + a {
    prop P(_a): add_comm.statement
    claim P_base: P(0) {}
    claim P_inc: P(a) => P(inc(a)) {apply add_inc; sub P(a)}
    claim P_dec: P(a) => P(dec(a)) {apply add_dec; sub P(a)}
    use induct(P, P_base, P_inc, P_dec)

}

claim sub_expand: a - (b)

claim div_ineq: (a > 0 && b | a) => (b < a || a = b) {
    claim 
}

claim gcd_zero: gcd(a,0) = a {
    claim a_div_a: a | a {
        divide_def.sub({a:a, b:a, c:inc(0)})
    }
    claim a_div_zero: a | 0 {
        divide_def.sub({a:a, b:0, c:0})
    }

}

claim gcd_sub: gcd(a,b) = gcd(a,a-b) {

}