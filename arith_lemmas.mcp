use axiom axioms

default claim add_assoc: a + (b + c) = (a + b) + c {
    claim P(_a): add_assoc.statement
    claim P_base: P(0) {}
    claim P_inc: P(a) => P(inc(a)) {apply add_inc}
    claim P_dec: P(a) => P(dec(a)) {apply add_dec}
    use induct(P)(P_base, P_inc, P_dec)
}

default claim add_comm: a + b = b + a {
    claim P(_a): add_comm.statement
    claim P_base: P(0) {}
    claim P_inc: P(a) => P(inc(a)) {apply add_inc; sub P(a)}
    claim P_dec: P(a) => P(dec(a)) {apply add_dec; sub P(a)}
    use induct(P)(P_base, P_inc, P_dec)
}

default claim mul_comm: a X b = b X a {
    claim P(_a): mul_comm.statement
    claim P_base: P(0) {}
    claim P_inc: P(a) => P(inc(a)) {apply add_inc; sub P(a)}
    claim P_dec: P(a) => P(dec(a)) {apply add_dec; sub P(a)}
    use induct(P)(P_base, P_inc, P_dec)
}

claim mul_dec: a X dec(b) = (a X b) - a {
    claim _: a X b = (a X dec(b)) + a {mul_inc.sub(b->inc(b))}
    use _
}

default claim mul_distrib: a X (b + c) = a X b + a X c {
    claim P(_c): mul_distrib.statement
    claim P_base: P(0) {apply mul_comm, mul_zero}
    claim P_inc: P(c) => P(inc(c)) {
        apply add_inc, mul_inc
        sub P(c); apply mul_inc
    }
    claim P_dec: P(c) => P(dec(c)) {apply add_dec, ; sub P(a)}
    use induct(P)(P_base, P_inc, P_dec)
}


default claim sub_expand: a - (b - c) = a - b + c {
    claim P(_c): sub_expand.statement
    claim P_base: P(0) {apply sub_zero, add_zero}
    claim P_inc: P(c) => P(inc(c)) {
        apply sub_inc, sub_dec
        sub P(c); apply add_inc
    }
    claim P_inc: P(c) => P(inc(c)) {
        apply sub_inc, sub_dec
        sub P(c); apply add_inc
    }
    claim P_dec: P(c) => P(dec(c)) {
        apply sub_dec, sub_inc
        sub P(c); apply add_dec
    }
    use induct(P)(P_base, P_inc, P_dec)
}

claim floor_divide:
(d>0) && (n>0) => (E q,r : 
    (q X d) + r = n &&
    0 <= r <= n
) {
    
}