# builtins: fA, E, True, False, substitution, equality
# patternmatch by a, b, c, ... in order

declare 0

operator inc(a)
operator dec(a)
operator a + b
operator a X b
operator a - b
operator gcd(a,b)

declarator a < b
declarator a | b

axiom dec_inc: dec(inc(a)) = inc(dec(a))
axiom add_zero: a + 0 = a
axiom add_comm: a + b = b + a
axiom add_assoc: a + (b + c) = (a + b) + c
axiom expand_inc: a + inc(b) = inc(a + b)
axiom inc_distrib: a X inc(b) = ( a X b ) + b
axiom mult_distrib: a X (b + c) = a X b + a X c
axiom a - inc(b) = pred( a - b )

axiom divide_def: a | b = (E c : a X c = b)
axiom lt_inc: a < inc(a)

# gcd defined as largest nonnegative GCD of any two integers
required axiom gcd_def: (gcd(a,b) | a) && (gcd(a,b) | b)
required axiom c > gcd(a,b) => not (c | a)

# induction
axiom ( declarator P(x) ) ( 
        P(0) &&
        P(x) => P(inc(x)) &&
        P(x) => P(dec(x))
    ) => fA x : P(x)